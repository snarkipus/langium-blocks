/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type UANCategory = Books | Cards | Tools;

export const UANCategory = 'UANCategory';

export function isUANCategory(item: unknown): item is UANCategory {
    return reflection.isInstance(item, UANCategory);
}

export interface Books extends AstNode {
    items: Array<UANItem>
    name: 'BOOKS'
    ref?: Reference<UANItem>
}

export const Books = 'Books';

export function isBooks(item: unknown): item is Books {
    return reflection.isInstance(item, Books);
}

export interface Cards extends AstNode {
    items: Array<UANItem>
    name: 'CARDS'
    ref?: Reference<UANItem>
}

export const Cards = 'Cards';

export function isCards(item: unknown): item is Cards {
    return reflection.isInstance(item, Cards);
}

export interface CategoryRef extends AstNode {
    readonly $container: UANBlock;
    catRef: Reference<UANCategory>
    itemRef?: Reference<UANItem>
}

export const CategoryRef = 'CategoryRef';

export function isCategoryRef(item: unknown): item is CategoryRef {
    return reflection.isInstance(item, CategoryRef);
}

export interface ExecuteBlock extends AstNode {
    sdb: SDBBlock
    uan: UANBlock
}

export const ExecuteBlock = 'ExecuteBlock';

export function isExecuteBlock(item: unknown): item is ExecuteBlock {
    return reflection.isInstance(item, ExecuteBlock);
}

export interface SDBBlock extends AstNode {
    readonly $container: ExecuteBlock;
    name: string
    seed: number
    toolUsage?: ToolUsageBlock
}

export const SDBBlock = 'SDBBlock';

export function isSDBBlock(item: unknown): item is SDBBlock {
    return reflection.isInstance(item, SDBBlock);
}

export interface Tools extends AstNode {
    items: Array<UANItem>
    name: 'TOOLS'
    ref?: Reference<UANItem>
}

export const Tools = 'Tools';

export function isTools(item: unknown): item is Tools {
    return reflection.isInstance(item, Tools);
}

export interface ToolUsage extends AstNode {
    readonly $container: ToolUsageBlock;
    qty: number
    tool: Reference<UANItem>
}

export const ToolUsage = 'ToolUsage';

export function isToolUsage(item: unknown): item is ToolUsage {
    return reflection.isInstance(item, ToolUsage);
}

export interface ToolUsageBlock extends AstNode {
    readonly $container: SDBBlock;
    name: 'TOOL-USAGE:'
    tools: Array<ToolUsage>
}

export const ToolUsageBlock = 'ToolUsageBlock';

export function isToolUsageBlock(item: unknown): item is ToolUsageBlock {
    return reflection.isInstance(item, ToolUsageBlock);
}

export interface UANBlock extends AstNode {
    readonly $container: ExecuteBlock;
    categories: Array<UANCategory>
    innerRefs: Array<CategoryRef>
    name: 'UAN-DEFINITION'
}

export const UANBlock = 'UANBlock';

export function isUANBlock(item: unknown): item is UANBlock {
    return reflection.isInstance(item, UANBlock);
}

export interface UANItem extends AstNode {
    readonly $container: Books | Cards | Tools;
    name: string
}

export const UANItem = 'UANItem';

export function isUANItem(item: unknown): item is UANItem {
    return reflection.isInstance(item, UANItem);
}

export interface BlocksAstType {
    Books: Books
    Cards: Cards
    CategoryRef: CategoryRef
    ExecuteBlock: ExecuteBlock
    SDBBlock: SDBBlock
    ToolUsage: ToolUsage
    ToolUsageBlock: ToolUsageBlock
    Tools: Tools
    UANBlock: UANBlock
    UANCategory: UANCategory
    UANItem: UANItem
}

export class BlocksAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Books', 'Cards', 'CategoryRef', 'ExecuteBlock', 'SDBBlock', 'ToolUsage', 'ToolUsageBlock', 'Tools', 'UANBlock', 'UANCategory', 'UANItem'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case Books:
            case Cards:
            case Tools: {
                return this.isSubtype(UANCategory, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Books:ref': {
                return UANItem;
            }
            case 'Cards:ref': {
                return UANItem;
            }
            case 'CategoryRef:catRef': {
                return UANCategory;
            }
            case 'CategoryRef:itemRef': {
                return UANItem;
            }
            case 'Tools:ref': {
                return UANItem;
            }
            case 'ToolUsage:tool': {
                return UANItem;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Books': {
                return {
                    name: 'Books',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'Cards': {
                return {
                    name: 'Cards',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'Tools': {
                return {
                    name: 'Tools',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'ToolUsageBlock': {
                return {
                    name: 'ToolUsageBlock',
                    mandatory: [
                        { name: 'tools', type: 'array' }
                    ]
                };
            }
            case 'UANBlock': {
                return {
                    name: 'UANBlock',
                    mandatory: [
                        { name: 'categories', type: 'array' },
                        { name: 'innerRefs', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new BlocksAstReflection();
