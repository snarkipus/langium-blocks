/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, ReferenceInfo, TypeMetaData } from 'langium';

export type UANCategory = Books | Cards | Tools;

export const UANCategory = 'UANCategory';

export function isUANCategory(item: unknown): item is UANCategory {
    return reflection.isInstance(item, UANCategory);
}

export interface Books extends AstNode {
    items: Array<UANItem>
}

export const Books = 'Books';

export function isBooks(item: unknown): item is Books {
    return reflection.isInstance(item, Books);
}

export interface Cards extends AstNode {
    items: Array<UANItem>
}

export const Cards = 'Cards';

export function isCards(item: unknown): item is Cards {
    return reflection.isInstance(item, Cards);
}

export interface ExecuteBlock extends AstNode {
    sdb?: SDBBlock
    uan?: UANBlock
}

export const ExecuteBlock = 'ExecuteBlock';

export function isExecuteBlock(item: unknown): item is ExecuteBlock {
    return reflection.isInstance(item, ExecuteBlock);
}

export interface Property extends AstNode {
    readonly $container: SDBBlock;
    value: string
}

export const Property = 'Property';

export function isProperty(item: unknown): item is Property {
    return reflection.isInstance(item, Property);
}

export interface SDBBlock extends AstNode {
    readonly $container: ExecuteBlock;
    props: Array<Property>
    special: SpecialProp
}

export const SDBBlock = 'SDBBlock';

export function isSDBBlock(item: unknown): item is SDBBlock {
    return reflection.isInstance(item, SDBBlock);
}

export interface SpecialProp extends AstNode {
    readonly $container: SDBBlock;
    seed: number
}

export const SpecialProp = 'SpecialProp';

export function isSpecialProp(item: unknown): item is SpecialProp {
    return reflection.isInstance(item, SpecialProp);
}

export interface Tools extends AstNode {
    items: Array<UANItem>
}

export const Tools = 'Tools';

export function isTools(item: unknown): item is Tools {
    return reflection.isInstance(item, Tools);
}

export interface UANBlock extends AstNode {
    readonly $container: ExecuteBlock;
    categories: Array<UANCategory>
}

export const UANBlock = 'UANBlock';

export function isUANBlock(item: unknown): item is UANBlock {
    return reflection.isInstance(item, UANBlock);
}

export interface UANItem extends AstNode {
    readonly $container: Books | Cards | Tools;
    name: string
}

export const UANItem = 'UANItem';

export function isUANItem(item: unknown): item is UANItem {
    return reflection.isInstance(item, UANItem);
}

export interface BlocksAstType {
    Books: Books
    Cards: Cards
    ExecuteBlock: ExecuteBlock
    Property: Property
    SDBBlock: SDBBlock
    SpecialProp: SpecialProp
    Tools: Tools
    UANBlock: UANBlock
    UANCategory: UANCategory
    UANItem: UANItem
}

export class BlocksAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Books', 'Cards', 'ExecuteBlock', 'Property', 'SDBBlock', 'SpecialProp', 'Tools', 'UANBlock', 'UANCategory', 'UANItem'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case Books:
            case Cards:
            case Tools: {
                return this.isSubtype(UANCategory, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Books': {
                return {
                    name: 'Books',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'Cards': {
                return {
                    name: 'Cards',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'SDBBlock': {
                return {
                    name: 'SDBBlock',
                    mandatory: [
                        { name: 'props', type: 'array' }
                    ]
                };
            }
            case 'Tools': {
                return {
                    name: 'Tools',
                    mandatory: [
                        { name: 'items', type: 'array' }
                    ]
                };
            }
            case 'UANBlock': {
                return {
                    name: 'UANBlock',
                    mandatory: [
                        { name: 'categories', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new BlocksAstReflection();
