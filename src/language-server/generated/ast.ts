/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export type InnerBlock = BlockA | BlockB;

export const InnerBlock = 'InnerBlock';

export function isInnerBlock(item: unknown): item is InnerBlock {
    return reflection.isInstance(item, InnerBlock);
}

export interface BigBlock extends AstNode {
    innerBlocks: Array<InnerBlock>
    name: 'BigBlock'
}

export const BigBlock = 'BigBlock';

export function isBigBlock(item: unknown): item is BigBlock {
    return reflection.isInstance(item, BigBlock);
}

export interface BlockA extends AstNode {
    readonly $container: BigBlock;
    props: Array<Property>
    special: SpecialProp
}

export const BlockA = 'BlockA';

export function isBlockA(item: unknown): item is BlockA {
    return reflection.isInstance(item, BlockA);
}

export interface BlockB extends AstNode {
    readonly $container: BigBlock;
    props: Array<Property>
    special: SpecialProp
}

export const BlockB = 'BlockB';

export function isBlockB(item: unknown): item is BlockB {
    return reflection.isInstance(item, BlockB);
}

export interface Property extends AstNode {
    readonly $container: BlockA | BlockB;
    name: string
}

export const Property = 'Property';

export function isProperty(item: unknown): item is Property {
    return reflection.isInstance(item, Property);
}

export interface SpecialProp extends AstNode {
    readonly $container: BlockA | BlockB;
    param: string
}

export const SpecialProp = 'SpecialProp';

export function isSpecialProp(item: unknown): item is SpecialProp {
    return reflection.isInstance(item, SpecialProp);
}

export type BlocksAstType = 'BigBlock' | 'BlockA' | 'BlockB' | 'InnerBlock' | 'Property' | 'SpecialProp';

export class BlocksAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['BigBlock', 'BlockA', 'BlockB', 'InnerBlock', 'Property', 'SpecialProp'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case BlockA:
            case BlockB: {
                return this.isSubtype(InnerBlock, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'BigBlock': {
                return {
                    name: 'BigBlock',
                    mandatory: [
                        { name: 'innerBlocks', type: 'array' }
                    ]
                };
            }
            case 'BlockA': {
                return {
                    name: 'BlockA',
                    mandatory: [
                        { name: 'props', type: 'array' }
                    ]
                };
            }
            case 'BlockB': {
                return {
                    name: 'BlockB',
                    mandatory: [
                        { name: 'props', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new BlocksAstReflection();
